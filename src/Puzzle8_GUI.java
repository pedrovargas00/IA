import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


public class Puzzle8_GUI extends javax.swing.JFrame {
    
    //Codigo para geneticos
    private ArrayList<Individuo_Puzzle8> poblacion;
    private ArrayList<Integer> fitness;
    private ArrayList<Individuo_Puzzle8> clones;
    private ArrayList<Individuo_Puzzle8> mutantes;
    Random random;
    int n=3; //Tamaño de la matriz 3x3
    int limPoblacion=50; //Variable
    int[] lower={0}; //Numero minimo del puzzle
    int[] upper={9}; //Numero maximo del puzzle
    //-------------
    private JFreeChart grafica;
    private XYDataset datos;
    private XYSeries serie;
    private JLabel grafico;
    
    boolean tipo = false;
    
    //Codigo para geneticos

    /**
     * Creates new form Puzzle8_GUI
     */
    public Puzzle8_GUI() {
        poblacion = new ArrayList<Individuo_Puzzle8>();
        fitness = new ArrayList<Integer>();
        clones = new ArrayList<Individuo_Puzzle8>();
        serie = new XYSeries("Nodos - Tiempo");
        initComponents();
        iniciarGrafica("Gráfica", "Nodos", "Tiempo");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        randomPanel = new javax.swing.JPanel();
        r0Label = new javax.swing.JLabel();
        r1Label = new javax.swing.JLabel();
        r2Label = new javax.swing.JLabel();
        r3Label = new javax.swing.JLabel();
        r4Label = new javax.swing.JLabel();
        r5Label = new javax.swing.JLabel();
        r6Label = new javax.swing.JLabel();
        r7Label = new javax.swing.JLabel();
        r8Label = new javax.swing.JLabel();
        randomButton = new javax.swing.JButton();
        metaPanel = new javax.swing.JPanel();
        m0Label = new javax.swing.JLabel();
        m1Label = new javax.swing.JLabel();
        m2Label = new javax.swing.JLabel();
        m3Label = new javax.swing.JLabel();
        m4Label = new javax.swing.JLabel();
        m5Label = new javax.swing.JLabel();
        m6Label = new javax.swing.JLabel();
        m7Label = new javax.swing.JLabel();
        m8Label = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        nodoTextLabel = new javax.swing.JLabel();
        nivelTextLabel = new javax.swing.JLabel();
        ejecucionTextLabel = new javax.swing.JLabel();
        nodosLabel = new javax.swing.JLabel();
        nivelLabel = new javax.swing.JLabel();
        tiempoLabel = new javax.swing.JLabel();
        bfsButton = new javax.swing.JButton();
        dfsButton = new javax.swing.JButton();
        bfButton = new javax.swing.JButton();
        aStarButton = new javax.swing.JButton();
        bgenerar = new javax.swing.JButton();
        btnGraficar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        panelGrafica = new javax.swing.JPanel();
        lbGrafica = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(60, 202, 220));

        randomPanel.setBackground(new java.awt.Color(60, 202, 220));

        r0Label.setBackground(new java.awt.Color(255, 255, 255));
        r0Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r0Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r0Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r0Label.setEnabled(false);

        r1Label.setBackground(new java.awt.Color(255, 255, 255));
        r1Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r1Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r1Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r1Label.setEnabled(false);

        r2Label.setBackground(new java.awt.Color(255, 255, 255));
        r2Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r2Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r2Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r2Label.setEnabled(false);

        r3Label.setBackground(new java.awt.Color(255, 255, 255));
        r3Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r3Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r3Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r3Label.setEnabled(false);

        r4Label.setBackground(new java.awt.Color(255, 255, 255));
        r4Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r4Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r4Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r4Label.setEnabled(false);

        r5Label.setBackground(new java.awt.Color(255, 255, 255));
        r5Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r5Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r5Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r5Label.setEnabled(false);

        r6Label.setBackground(new java.awt.Color(255, 255, 255));
        r6Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r6Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r6Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r6Label.setEnabled(false);

        r7Label.setBackground(new java.awt.Color(255, 255, 255));
        r7Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r7Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r7Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r7Label.setEnabled(false);

        r8Label.setBackground(new java.awt.Color(255, 255, 255));
        r8Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        r8Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r8Label.setText(" ");
        r8Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        r8Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r8Label.setEnabled(false);

        randomButton.setBackground(new java.awt.Color(60, 122, 220));
        randomButton.setText("iniciar");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout randomPanelLayout = new javax.swing.GroupLayout(randomPanel);
        randomPanel.setLayout(randomPanelLayout);
        randomPanelLayout.setHorizontalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addComponent(r0Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(r1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(r2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(randomPanelLayout.createSequentialGroup()
                        .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(randomButton)
                            .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, randomPanelLayout.createSequentialGroup()
                                    .addComponent(r3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(r4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, randomPanelLayout.createSequentialGroup()
                                    .addComponent(r6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(r7Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(r8Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(r5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        randomPanelLayout.setVerticalGroup(
            randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r0Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(r3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(r4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r7Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(randomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(r6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(r8Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(randomButton)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        metaPanel.setBackground(new java.awt.Color(60, 202, 220));

        m0Label.setBackground(new java.awt.Color(255, 255, 255));
        m0Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m0Label.setText("1");
        m0Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m0Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m0Label.setEnabled(false);
        m0Label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        m1Label.setBackground(new java.awt.Color(255, 255, 255));
        m1Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m1Label.setText("2");
        m1Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m1Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m1Label.setEnabled(false);

        m2Label.setBackground(new java.awt.Color(255, 255, 255));
        m2Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m2Label.setText("3");
        m2Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m2Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m2Label.setEnabled(false);

        m3Label.setBackground(new java.awt.Color(255, 255, 255));
        m3Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m3Label.setText("4");
        m3Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m3Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m3Label.setEnabled(false);

        m4Label.setBackground(new java.awt.Color(255, 255, 255));
        m4Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m4Label.setText("5");
        m4Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m4Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m4Label.setEnabled(false);

        m5Label.setBackground(new java.awt.Color(255, 255, 255));
        m5Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m5Label.setText("6");
        m5Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m5Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m5Label.setEnabled(false);

        m6Label.setBackground(new java.awt.Color(255, 255, 255));
        m6Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m6Label.setText("7");
        m6Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m6Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m6Label.setEnabled(false);

        m7Label.setBackground(new java.awt.Color(255, 255, 255));
        m7Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m7Label.setText("8");
        m7Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m7Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m7Label.setEnabled(false);

        m8Label.setBackground(new java.awt.Color(255, 255, 255));
        m8Label.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        m8Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m8Label.setText(" ");
        m8Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        m8Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m8Label.setEnabled(false);

        javax.swing.GroupLayout metaPanelLayout = new javax.swing.GroupLayout(metaPanel);
        metaPanel.setLayout(metaPanelLayout);
        metaPanelLayout.setHorizontalGroup(
            metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metaPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(metaPanelLayout.createSequentialGroup()
                        .addComponent(m3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(m4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(metaPanelLayout.createSequentialGroup()
                        .addComponent(m6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(m7Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(metaPanelLayout.createSequentialGroup()
                        .addComponent(m0Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(m1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m8Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        metaPanelLayout.setVerticalGroup(
            metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metaPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m0Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m4Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m5Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(metaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m6Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m7Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m8Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        controlPanel.setBackground(new java.awt.Color(78, 60, 220));

        nodoTextLabel.setBackground(new java.awt.Color(255, 255, 255));
        nodoTextLabel.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        nodoTextLabel.setText("Número de nodos:");
        nodoTextLabel.setEnabled(false);

        nivelTextLabel.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        nivelTextLabel.setText("Número de niveles:");
        nivelTextLabel.setEnabled(false);

        ejecucionTextLabel.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        ejecucionTextLabel.setText("Tiempo de ejecución:");
        ejecucionTextLabel.setEnabled(false);

        bfsButton.setText("BFS");
        bfsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfsButtonActionPerformed(evt);
            }
        });

        dfsButton.setText("DFS");
        dfsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfsButtonActionPerformed(evt);
            }
        });

        bfButton.setText("BF");
        bfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfButtonActionPerformed(evt);
            }
        });

        aStarButton.setText("A*");
        aStarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aStarButtonActionPerformed(evt);
            }
        });

        bgenerar.setText("Genético");
        bgenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgenerarActionPerformed(evt);
            }
        });

        btnGraficar.setText("Graficar");
        btnGraficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nodoTextLabel)
                    .addComponent(nivelTextLabel)
                    .addComponent(ejecucionTextLabel))
                .addGap(22, 22, 22)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nivelLabel)
                    .addComponent(nodosLabel)
                    .addComponent(tiempoLabel))
                .addGap(79, 79, 79)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(bfsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bfButton)
                        .addGap(18, 18, 18)
                        .addComponent(bgenerar))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(dfsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(aStarButton)
                        .addGap(18, 18, 18)
                        .addComponent(btnGraficar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bfsButton)
                    .addComponent(bfButton)
                    .addComponent(bgenerar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dfsButton)
                    .addComponent(aStarButton)
                    .addComponent(btnGraficar))
                .addGap(28, 28, 28))
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodoTextLabel)
                    .addComponent(nodosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nivelTextLabel)
                    .addComponent(nivelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ejecucionTextLabel)
                    .addComponent(tiempoLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        javax.swing.GroupLayout panelGraficaLayout = new javax.swing.GroupLayout(panelGrafica);
        panelGrafica.setLayout(panelGraficaLayout);
        panelGraficaLayout.setHorizontalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaLayout.createSequentialGroup()
                .addComponent(lbGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelGraficaLayout.setVerticalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(randomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(metaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(randomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(metaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Botón activado");
        eventoRandomButton();
    }//GEN-LAST:event_randomButtonActionPerformed

    private void dfsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfsButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("\nDFS activado");
        eventoDFSButton();
    }//GEN-LAST:event_dfsButtonActionPerformed

    private void bfsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfsButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("\nBFS activado");
        eventoBFSButton();
    }//GEN-LAST:event_bfsButtonActionPerformed

    private void bfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("\nBF activado");
        eventoBFButton();
    }//GEN-LAST:event_bfButtonActionPerformed

    private void aStarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aStarButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("\nA* activado");
        eventoaStarButton();
    }//GEN-LAST:event_aStarButtonActionPerformed

    private void bgenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgenerarActionPerformed
        // Generar poblacion Algoritmo Genetico
        for(int i=0;i<limPoblacion;i++)
            poblacion.add(new Individuo_Puzzle8(n,lower,upper));
        for(int i=0;i<poblacion.size();i++)
            area.append(poblacion.get(i).toString()+" H(n) = "+ h(poblacion.get(i),controlador.iniciarMeta())+"\n");
        
        //fitness
        for(int i=0;i<poblacion.size();i++){
            fitness.add(h(poblacion.get(i),controlador.iniciarMeta()));
        }
        
        List auxMin = new ArrayList();
        auxMin = fitness;
        Collections.sort(auxMin);
        area.append("\n---------------\nMínimo: "+auxMin.get(0)+"\n---------------\n");
        
        //Clonación
        do{
            Individuo_Puzzle8 clon = new Individuo_Puzzle8(n,lower,upper);
            int valor = h(clon,controlador.iniciarMeta());
            int minimo= (int) auxMin.get(0);
            if(valor<=minimo){
                clones.add(clon);
            }
        }while(clones.size()<limPoblacion);
        area.append("\n------ Clones ------\n");
        for(int i=0;i<clones.size();i++)
            area.append(clones.get(i).toString()+" H(n) = "+ h(clones.get(i),controlador.iniciarMeta())+"\n");
        area.append("\n------ Mutaciones ------\n");
        
        Individuo_Puzzle8 menor = clones.get(0);
        
        for(int i = 1; i < clones.size(); i++)
            if(h(clones.get(i),controlador.iniciarMeta()) < h(menor,controlador.iniciarMeta()))
                menor = clones.get(i);
        
        tipo=true; //Se cambian datos de grafica
        agregarDatos(0,h(menor,controlador.iniciarMeta()));
        mutar(menor);
        
    }//GEN-LAST:event_bgenerarActionPerformed

    private void btnGraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarActionPerformed
        Hashtable<Integer, Long> valores = controlador.getValores();
        for (Map.Entry<Integer, Long> entry : valores.entrySet()) {
            agregarDatos(entry.getKey(), entry.getValue().intValue());
        }
        if(tipo){
            iniciarGrafica("Gráfica", "Cambios", "H(n)");
        }else{
            iniciarGrafica("Gráfica", "Nodos", "Tiempo");
        }
        panelGrafica.setVisible(true);
    }//GEN-LAST:event_btnGraficarActionPerformed
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aStarButton;
    private javax.swing.JTextArea area;
    private javax.swing.JButton bfButton;
    private javax.swing.JButton bfsButton;
    private javax.swing.JButton bgenerar;
    private javax.swing.JButton btnGraficar;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton dfsButton;
    private javax.swing.JLabel ejecucionTextLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbGrafica;
    private javax.swing.JLabel m0Label;
    private javax.swing.JLabel m1Label;
    private javax.swing.JLabel m2Label;
    private javax.swing.JLabel m3Label;
    private javax.swing.JLabel m4Label;
    private javax.swing.JLabel m5Label;
    private javax.swing.JLabel m6Label;
    private javax.swing.JLabel m7Label;
    private javax.swing.JLabel m8Label;
    private javax.swing.JPanel metaPanel;
    private javax.swing.JLabel nivelLabel;
    private javax.swing.JLabel nivelTextLabel;
    private javax.swing.JLabel nodoTextLabel;
    private javax.swing.JLabel nodosLabel;
    private javax.swing.JPanel panelGrafica;
    private javax.swing.JLabel r0Label;
    private javax.swing.JLabel r1Label;
    private javax.swing.JLabel r2Label;
    private javax.swing.JLabel r3Label;
    private javax.swing.JLabel r4Label;
    private javax.swing.JLabel r5Label;
    private javax.swing.JLabel r6Label;
    private javax.swing.JLabel r7Label;
    private javax.swing.JLabel r8Label;
    private javax.swing.JButton randomButton;
    private javax.swing.JPanel randomPanel;
    private javax.swing.JLabel tiempoLabel;
    // End of variables declaration//GEN-END:variables
    private Controlador controlador;
    
    public void setControlador(Controlador controlador){
        
        this.controlador = controlador;
    }
   
    public void setRandom(int[][] matriz){
        
        if(matriz[0][0] == 0)
            r0Label.setText(" ");
        else
           r0Label.setText(String.valueOf(matriz[0][0]));
        if(matriz[0][1] == 0)
            r1Label.setText(" ");
        else
            r1Label.setText(String.valueOf(matriz[0][1]));
        if(matriz[0][2] == 0)
            r2Label.setText(" ");
        else
            r2Label.setText(String.valueOf(matriz[0][2]));
        if(matriz[1][0] == 0)
            r3Label.setText(" ");
        else
            r3Label.setText(String.valueOf(matriz[1][0]));
        if(matriz[1][1] == 0)
            r4Label.setText(" ");
        else
            r4Label.setText(String.valueOf(matriz[1][1]));
        if(matriz[1][2] == 0)
            r5Label.setText(" ");
        else
            r5Label.setText(String.valueOf(matriz[1][2]));
        if(matriz[2][0] == 0)
            r6Label.setText(" ");
        else
            r6Label.setText(String.valueOf(matriz[2][0]));
        if(matriz[2][1] == 0)
            r7Label.setText(" ");
        else
            r7Label.setText(String.valueOf(matriz[2][1]));
        if(matriz[2][2] == 0)
            r8Label.setText(" ");
        else
            r8Label.setText(String.valueOf(matriz[2][2]));
        
    }
    
    public String getM0Label(){ return m0Label.getText();}
    public String getM1Label(){ return m1Label.getText();}
    public String getM2Label(){ return m2Label.getText();}
    public String getM3Label(){ return m3Label.getText();}
    public String getM4Label(){ return m4Label.getText();}
    public String getM5Label(){ return m5Label.getText();}
    public String getM6Label(){ return m6Label.getText();}
    public String getM7Label(){ return m7Label.getText();}
    public String getM8Label(){ return m8Label.getText();}
    
    private void eventoRandomButton(){
        controlador.activar();
    }
    
    private void eventoDFSButton(){ 
        limpiar();
        dfsButton.setEnabled(false);
        bfsButton.setEnabled(false);
        bfButton.setEnabled(false);
        aStarButton.setEnabled(false);
        randomButton.setEnabled(false);
        controlador.dfs();
    }
    
    private void eventoBFSButton(){
        limpiar();
        bfsButton.setEnabled(false);
        dfsButton.setEnabled(false);
        bfButton.setEnabled(false);
        aStarButton.setEnabled(false);
        randomButton.setEnabled(false);
        controlador.bfs();
    }
    
    private void eventoBFButton(){
        limpiar();
        bfsButton.setEnabled(false);
        dfsButton.setEnabled(false);
        bfButton.setEnabled(false);
        aStarButton.setEnabled(false);
        randomButton.setEnabled(false);
        controlador.bf();
    }
    
    private void eventoaStarButton(){
        limpiar();
        bfsButton.setEnabled(false);
        dfsButton.setEnabled(false);
        bfButton.setEnabled(false);
        aStarButton.setEnabled(false);
        randomButton.setEnabled(false);
        controlador.aStar();
    }
    
    public void setNumNodos(String nodos){
        
        nodosLabel.setText(nodos);
    }
    
    public void setNumNiveles(String niveles){
        
        nivelLabel.setText(niveles);
    }
    
    public void setTiempo(String tiempo){
        
        tiempoLabel.setText(tiempo + " ms");
        randomButton.setEnabled(true);
        bfsButton.setEnabled(true);
        dfsButton.setEnabled(true);
        bfButton.setEnabled(true);
        aStarButton.setEnabled(true);
    }
    
    public void agregarDatos(int x, int y){
        //System.out.println("Agregando datos");
        serie.add(x, y);
        
    }
    
    public void iniciarGrafica(String titulo, String ejeX, String ejeY){
        JButton prueba = new JButton("prueba");
        System.out.println("Iniciar grafica");
        datos = new XYSeriesCollection(serie);
        
        grafica = ChartFactory.createXYLineChart(titulo, ejeX, ejeY, datos,
                PlotOrientation.VERTICAL, true, true, false);
        
        BufferedImage graficotorta = grafica.createBufferedImage(779, 449);
        ImageIcon img = new ImageIcon(graficotorta);
        lbGrafica.setIcon(img);
        
    }
    
    public void limpiar(){
        nodosLabel.setText("");
        nivelLabel.setText("");
        tiempoLabel.setText("");
    }
    
    public int h(Individuo_Puzzle8 individuo,int[][] mMeta){
        //funcion para obtener el valor h de cuales piezas estan bien colocadas
        int h=9;
        int matriz[][] = individuo.getValorIndividuo();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(matriz[i][j]==mMeta[i][j]){
                    h--;
                }
            }
        }
        return h;
    }
    
    public void mutar(Individuo_Puzzle8 elemento){
        ArrayList correctos = new ArrayList(); //coordenadas,elementos
        int[][] incorrectos = new int[9][2]; //coordenadas,elementos
        int[][] matriz = elemento.getValorIndividuo();
        int[][] meta = controlador.iniciarMeta();
        int contador=0;
        int[][] coor = new int[1][2];
        int dimensionLowerBounds;
        int dimensionUpperBounds;
        boolean flag;
        int cambios=0;
        DoubleStream valueGenerator;
        ArrayList<Integer> valores = new ArrayList<Integer>();
        //Guardamos los elementos que estan bien
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(matriz[i][j]== meta[i][j]){
                    int[][] v= new int[1][2];
                    v[0][0]=i;
                    v[0][1]=j;
                    correctos.add(v);
                    contador++;
                }
            }
        }
        
        if(contador==8){
            System.out.println("Se encontró la meta");
        }else{
            do{
                int in=0;
                flag=false;
                //Guardamos los elementos que estan mal
                for(int i=0;i<3;i++){
                    for(int j=0;j<3;j++){
                        if(matriz[i][j]!= meta[i][j]){
                            incorrectos[in][0]=i;
                            incorrectos[in][1]=j;
                            in++;
                        }else{
                            contador++; //reiniciarlo a 0
                            valores.add(matriz[i][j]);
                        }
                    }
                }
                
                for(int i = 0; i < n; i++)
                    for(int j = 0; j < n; j++){
                        coor[0][0] = i;
                        coor[0][1] = j;
                        
                        for(int a=0;a<in;a++){
                            if(coor[0][0]==incorrectos[a][0]&&coor[0][1]==incorrectos[a][1]){
                                flag=true;
                                a=in;
                            }else{
                                flag=false;
                            }
                        }
                        
                        if(flag){
                            dimensionLowerBounds = 0;
                            dimensionUpperBounds = 9;
                            int valor = (int)(Math.random()*9);
                            //verificacion para ver que no se repita algun numero
                            if(valores.contains(valor) && valores.size()<9){
                                do{
                                    valor = (int)(Math.random()*9);
                                    System.out.println(valor);
                                }while(valores.contains(valor));
                                matriz[i][j] = valor;
                            }else{
                                valores.add(valor);
                                matriz[i][j] = valor;
                            }
                            //valores para grafica
                            cambios++;
                        }
                        
                        //valueGenerator = random.doubles(dimensionLowerBounds, dimensionUpperBounds);//?
                    }
                Individuo_Puzzle8 mutante= new Individuo_Puzzle8(n,matriz);
                //mutantes.add(mutante);
                System.out.println("cambio de la matriz");
                for(int i = 0; i < n; i++){
                    for(int j = 0; j < n; j++){
                        System.out.print(matriz[i][j]);
                        area.append(" "+matriz[i][j]+" ");
                    }
                    System.out.print("\n");
                    area.append(" || ");
                }
                area.append(" H(n) = "+h(mutante,controlador.iniciarMeta())+"\n");
                agregarDatos(cambios,h(mutante,controlador.iniciarMeta()));
            }while(h(elemento,controlador.iniciarMeta())!=0);
        }
    }

}
